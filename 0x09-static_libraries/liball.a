!<arch>
0-isupper.c/    0           0     0     644     256       `
#include "main.h"

/**
 * _isupper - Entry point
 * hecks for uppercase character
 *
 * @c: is the checked number
 *
 * Return: 1 uppercase , 0 lowercase
*/


int _isupper(int c)
{
	if (c >= 'A' || c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
0-memset.c/     0           0     0     644     413       `
#include "main.h"

/**
 * _memset - a function that fills memory with a constant byte.
 *
 * @n: number of bytes to be filed
 * @s: pointer to the first element of the array
 * @b: the value to put
 *
 * Return: (s)
*/

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;
	unsigned int j;

	j = 1;

	for (i = 1; i <= n; i++)
	{
		*s = b;
		s++;
	}
	while (j <= i)
	{
		s--;
		i--;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     388       `
#include "main.h"
#include <string.h>

/**
 * _strcat - a function that concatenates two strings.
 *
 * @dest:a string that will be added to
 * @src:a string that will be  add
 * Return:a pointer to the resulting string dest
*/

char *_strcat(char *dest, char *src)
{
	int c, c1;

	c = 0;
	while (dest[c])
		c++;
	for (c1 = 0; src[c1]; c1++)
	{
	dest[c++] = src[c1];
	}
	return (dest);
}
100-atoi.c/     0           0     0     644     359       `
#include "main.h"

/**
 * _atoi - a function that convert a string to an integer.
 *
 * @s: a string to be converted
*/

int _atoi(char *s)
{
	unsigned int num = 0;
	int sign = 1;

	do {
		if (*s == '-')
			sign *= -1;
		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');
		else if (num > 0)
			break;
	} while (*s++);
	return (num * sign);
}

1-isdigit.c/    0           0     0     644     270       `
#include "main.h"

/**
 * _isdigit - Entry point
 * function that  checks for a digit (0 through 9)
 *
 * @c: is the checked character
 *
 * Return: 1 is digit , 0 is not
*/

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
1-memcpy.c/     0           0     0     644     431       `
#include "main.h"

/**
 * _memcpy - a function that copies memory area.
 *
 * @n :number of copied bytes
 * @src :memory area where we copy from
 * @dest: memory area where we copy to
 *
 * Return: (dest)
*/

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;
	unsigned int j;

	j = 1;
	for (i = 1; i <= n; i++)
	{
		*dest = *src;
		dest++;
		src++;
	}
	while (j <= n)
	{
		dest--;
		j++;
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     373       `
#include "main.h"

/**
 * _strncat - concatenates two strings
 * @dest: input value
 * @src: input value
 * @n: input value
 *
 * Return: void
*/

char *_strncat(char *dest, char *src, int n)
{
	int j;
	int i;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}

2-strchr.c/     0           0     0     644     314       `
#include "main.h"

/**
 * _strchr - a function that locates a character in a string.
 *
 * @c: is the searched for character
 * @s: the string searched in
 *
 * Return: (s)
*/

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == c)
			return (s + i);
	}
	return ('\0');
}



2-strlen.c/     0           0     0     644     215       `
#include "main.h"
/**
  * _strlen - a function that returns the length of a string.
  *
  * @s: the string to be measured
*/

int _strlen(char *s)
{
	int i = 0;

	while (*s >= 32)
	{
		i++;
		s++;
	}
	return (i);
}

2-strncpy.c/    0           0     0     644     395       `
#include "main.h"

/**
 * _strncpy - a function that copies a string.
 *
 * @dest:the string to be copied into
 * @src: the string to be copied
 * @n: number of copies
 *
 * Return: the exact value of ctrcpy
*/

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];
	while (i < n)
	{
		dest[i] = '\0';
		i++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     201       `
#include "main.h"

/**
 * _islower - checks for lower case character
 * @c: the character to check
 * Return: 1 if c is lowercase, 0 otherwise
*/
int _islower(int c)
{
return (c >= 'a' && c <= 'z');
}

3-puts.c/       0           0     0     644     243       `
#include "main.h"

/**
 * _puts - a function that prints a string, followed by a new line, to stdout.
 *
 * @str: a string to be printed
*/

void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str + 0);
		str++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     402       `
#include "main.h"

/**
 * _strcmp - a function that compares two strings.
 *
 * @s1:the string to be compaired
 * @s2: the string to be compaired
 *
 * Return: the func. should returb the exact result of srtcmp
*/

int _strcmp(char *s1, char *s2)
{
	int equal = 0;

	while (*s1)
	{
		if (*s1 != *s2)
		{
			equal = ((int)*s1 - 48) - ((int)*s2 - 48);
			break;
		}
		s1++;
		s2++;
	}
	return (equal);
}
3-strspn.c/     0           0     0     644     404       `
#include "main.h"

/**
 * _strspn - a function that gets the length of a prefix substring
 *
 * @s: the compared string
 * @accept: the substring to be compaired
 *
 * Return: (s)
*/

unsigned int _strspn(char *s, char *accept)
{
	unsigned int i;
	unsigned int j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != s[i]; j++)
		{
		if (accept[j] == '\0')
			return (i);
		}
	}
	return (i);
}
4-isalpha.c/    0           0     0     644     234       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic character
 * @c: the character to be checked
 * Return: 1 if c is a letter, 0 otherwise
*/
int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}
4-strpbrk.c/    0           0     0     644     436       `
#include "main.h"

/**
 * _strpbrk -  a function that searches a string for
 *  any of a set of bytes.
 *
 * @s: is the compared to string
 * @accept: the string to be found
 *
 * Return: (s)
*/

char *_strpbrk(char *s, char *accept)
{
	int i, j;
	char *p;

	i = 0;
	while (s[i] != '\0')
	{
		j = 0;
		while (accept[j] != '\0')
		{
			if (accept[j] == s[i])
			{
				p = &s[i];
				return (p);
			}
			j++;
		}
		i++;
	}
	return (0);
}
5-strstr.c/     0           0     0     644     422       `
#include "main.h"

/**
 * _strstr -  a function that locates a substring.
 *
 * @haystack: the compared string
 * @needle: the string to be found
 *
 * Return: (haystack)
*/

char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *i = haystack;
		char *p = needle;

		while (*i == *p && *p != '\0')
		{
			i++;
			p++;
		}
		if (*p == '\0')
			return (haystack);
	}
	return (0);
}

6-abs.c/        0           0     0     644     206       `
#include "main.h"

/**
 * _abs - computes the absolute value of an integer
 * @n: the int to check
 * Return: the absolute value of int
*/

int _abs(int n)
{
	if (n > 0)
	{
		return (n);
	}
	return (-n);
}
9-strcpy.c/     0           0     0     644     328       `
#include "main.h"

/**
 * *_strcpy - a function that copies the string pointed to by src
 * @dest: copy from
 * @src: copy to
 * Return: string
*/

char *_strcpy(char *dest, char *src)
{
	int i = 0;
	int x = 0;

	while (*(src + i) != '\0')
		i++;
	for (; x < i; x++)
	{
		dest[x] = src[x];
	}
	dest[i] = '\0';
	return (dest);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
 return (write(1, &c, 1));
}

